- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version:
      "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact only if needed
  when:
    ( k3s_version_output.rc != 0 or installed_k3s_version is
    version(k3s_version, '<') )
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

- name: Init first server node
  when: inventory_hostname == groups['server'][0]
  block:
    - name: Copy K3s service file
      ansible.builtin.template:
        src: templates/k3s-cluster-init.service.j2
        dest: "{{ k3s_server_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file

    - name:
        Delete any existing token from the environment if different from the new
        one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ k3s_server_systemd_dir }}/k3s.service.env"
        regexp: ^K3S_TOKEN=\\s*(?!{{ token | default('') }}\\s*$)

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - service_file.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when:
        ansible_facts.services['k3s.service'] is not defined or
        ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Pause to allow first server startup
      ansible.builtin.pause:
        seconds: 10

    - name: Store Master node's IP address
      ansible.builtin.set_fact:
        api_endpoint: "{{ ansible_default_ipv4.address }}"

    - name: Get the token
      block:
        - name: Wait for token
          ansible.builtin.wait_for:
            path: /var/lib/rancher/k3s/server/token

        - name: Read node-token from master
          ansible.builtin.slurp:
            src: /var/lib/rancher/k3s/server/token
          register: node_token

        - name: Store Master node-token
          ansible.builtin.set_fact:
            token:
              "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

    - name: Store Master node's Tailscale IP address
      block:
        - name: Get Tailscale IP from the node
          ansible.builtin.command: tailscale ip
          register: tailscale_ip_output
          changed_when: false
        - name: Set Tailscale IP as fact
          ansible.builtin.set_fact:
            tailscale_ip: "{{ tailscale_ip_output.stdout_lines[0] }}"

- name: Start other servers and verify status
  when:
    - inventory_hostname != groups['server'][0]
  block:
    - name: Get the api endpoint from the first server
      ansible.builtin.set_fact:
        api_endpoint: "{{ hostvars[groups['server'][0]].api_endpoint }}"
    - name: Get the token from the first server
      ansible.builtin.set_fact:
        token: "{{ hostvars[groups['server'][0]].token }}"

    - name:
        Delete any existing token from the environment if different from the new
        one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ k3s_server_systemd_dir }}/k3s.service.env"
        regexp: ^K3S_TOKEN=\\s*(?!{{ token }}\\s*$)

    - name: Add the token for joining the cluster to the environment
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ k3s_server_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items:
        - K3S_TOKEN={{ token }}

    - name: Copy K3s service file
      ansible.builtin.template:
        src: k3s-ha.service.j2
        dest: "{{ k3s_server_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - service_file.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when:
        ansible_facts.services['k3s.service'] is not defined or
        ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Verify that all server nodes joined
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true"
          -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until:
        nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['server'] |
        length)
      retries: 20
      delay: 10
      changed_when: false
