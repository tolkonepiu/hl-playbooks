- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version:
      "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact only if needed
  when:
    ( k3s_version_output.rc != 0 or installed_k3s_version is
    version(k3s_version, '<') )
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
        INSTALL_K3S_EXEC: agent
      changed_when: true

- name: Get the api endpoint from the first server
  when: not use_tailscale_ip | default(false)
  ansible.builtin.set_fact:
    api_endpoint: "{{ hostvars[groups['server'][0]].api_endpoint }}"

- name: Get the Tailscale IP from the first server
  when: use_tailscale_ip | default(false)
  ansible.builtin.set_fact:
    api_endpoint: "{{ hostvars[groups['server'][0]].tailscale_ip }}"

- name: Set Tailscale IP as external IP for k3s agent
  when: use_tailscale_ip | default(false)
  block:
    - name: Get Tailscale IP from the node
      ansible.builtin.command: tailscale ip
      register: tailscale_ip_output
      changed_when: false
    - name: Set Tailscale IP as fact
      ansible.builtin.set_fact:
        tailscale_ip: "{{ tailscale_ip_output.stdout_lines[0] }}"

- name: Get the token from the first server
  ansible.builtin.set_fact:
    token: "{{ hostvars[groups['server'][0]].token }}"

- name:
    Delete any existing token from the environment if different from the new one
  ansible.builtin.lineinfile:
    state: absent
    path: "{{ k3s_agent_systemd_dir }}/k3s-agent.service.env"
    regexp: ^K3S_TOKEN=\\s*(?!{{ token }}\\s*$)

- name: Add the token for joining the cluster to the environment
  no_log: true # avoid logging the server token
  ansible.builtin.lineinfile:
    path: "{{ k3s_agent_systemd_dir }}/k3s-agent.service.env"
    line: "{{ item }}"
  with_items:
    - K3S_TOKEN={{ token }}

- name: Copy K3s service file
  register: k3s_agent_service
  ansible.builtin.template:
    src: k3s-agent.service.j2
    dest: "{{ k3s_agent_systemd_dir }}/k3s-agent.service"
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s-agent
    daemon_reload: "{{ true if k3s_agent_service.changed else false }}"
    state: "{{ 'restarted' if k3s_agent_service.changed else 'started' }}"
    enabled: true
